generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String               @id @default(cuid())
  email        String               @unique
  password     String
  role         Role
  createdAt    DateTime             @default(now())
  employer     EmployerProfile?
  student      StudentProfile?
  professional ProfessionalProfile?
  sessions     UserSession[]
}

model StudentProfile {
  id                 String              @id @default(cuid())
  userId             String              @unique
  name               String
  college            String
  degree             String
  branch             String              @default("Not specified")
  year               Int
  interests          String
  cvUrl              String?
  dob                DateTime?
  phoneNo            String?
  state              String?
  aspiration         String?
  workingStatus      WorkingStatus       @default(FRESHER)
  bookmarks          Bookmark[]
  eventRegistrations EventRegistration[]
  skills             StudentSkill[]
  user               User                @relation(fields: [userId], references: [id])
}

model ProfessionalProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  phoneNo     String?
  company     String
  designation String
  experience  Int      @default(0)
  skills      String[]
  industry    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model EmployerProfile {
  id          String @id @default(cuid())
  userId      String @unique
  name        String
  company     String
  designation String
  user        User   @relation(fields: [userId], references: [id])
  jobs        Job[]
}

model Job {
  id          String          @id @default(cuid())
  title       String
  description String
  type        String
  duration    String
  location    String
  stipend     String
  skills      String
  applyMethod String
  status      JobStatus       @default(PENDING)
  employerId  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  bookmarks   Bookmark[]
  employer    EmployerProfile @relation(fields: [employerId], references: [id])
}

model Bookmark {
  id        String         @id @default(cuid())
  studentId String
  jobId     String
  job       Job            @relation(fields: [jobId], references: [id])
  student   StudentProfile @relation(fields: [studentId], references: [id])
}

model Event {
  id              String              @id @default(cuid())
  title           String
  date            DateTime
  time            String
  description     String
  address         String?
  agenda          Json?
  attendees       Int                 @default(0)
  category        EventCategory       @default(OTHER)
  createdAt       DateTime            @default(now())
  endDate         DateTime?
  format          EventFormat         @default(VIRTUAL)
  image           String?
  location        String
  longDescription String?
  organizer       String?
  sponsors        Json?
  updatedAt       DateTime            @updatedAt
  registrations   EventRegistration[]
}

model EventRegistration {
  id           String             @id @default(cuid())
  studentId    String
  eventId      String
  cancelledAt  DateTime?
  email        String
  interests    String?
  name         String
  phone        String?
  registeredAt DateTime           @default(now())
  requirements String?
  resumeUrl    String?
  status       RegistrationStatus @default(CONFIRMED)
  event        Event              @relation(fields: [eventId], references: [id])
  student      StudentProfile     @relation(fields: [studentId], references: [id])

  @@unique([studentId, eventId])
}

model UpskillingResource {
  id       String   @id @default(cuid())
  title    String
  category Category
  type     FileType
  fileUrl  String
}

model UserSession {
  id        String    @id @default(cuid())
  userId    String?
  page      String
  action    String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id])
}

enum Role {
  STUDENT
  EMPLOYER
  PROFESSIONAL
  ADMIN
}

enum JobStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Mode {
  ONLINE
  OFFLINE
}

enum RegistrationStatus {
  CONFIRMED
  CANCELLED
  WAITLISTED
}

enum EventFormat {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum EventCategory {
  CAREER_FAIR
  WORKSHOP
  NETWORKING
  WEBINAR
  PANEL
  HACKATHON
  CONFERENCE
  OTHER
}

enum Category {
  Resume
  GDs
  Emailing
  SpokenEnglish
}

enum FileType {
  PDF
  Video
}

enum WorkingStatus {
  FRESHER
  PROFESSIONAL
}

// New model for student skills
model StudentSkill {
  id          String         @id @default(cuid())
  studentId   String
  name        String
  proficiency Int            @default(0) // 0-100 scale
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  student     StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([studentId, name])
}
